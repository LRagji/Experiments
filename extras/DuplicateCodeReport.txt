
------------------------------------------------------------

Match - 2 instances

./pages/secure/faqs.js:36,41
async handleDelete(req, res) {
    try {
        if (this.util.validateIsWholeNumberBetween(req.body.id, 5000, 1) === false) {
            req.flash(this.const.FAQSError, "Invalid Input parameter Id.");
            res.redirect("/secure/faqs");
            return;

./pages/secure/faqs.js:53,58
async handleEdit(req, res) {
    try {
        if (this.util.validateIsWholeNumberBetween(req.body.id, 5000, 1) === false) {
            req.flash(this.const.FAQSError, "Invalid Input parameter Id.");
            res.redirect("/secure/faqs");
            return;

------------------------------------------------------------

Match - 2 instances

./pages/secure/faqs.js:61,65
if (this.util.validateLength(req.body.Q, 200, 1) === false) {
    req.flash(this.const.FAQSError, "Invalid Input parameter Question length.");
    res.redirect("/secure/faqs");
    return;
}

./pages/secure/faqs.js:85,89
if (this.util.validateLength(req.body.Q, 200, 1) === false) {
    req.flash(this.const.FAQSError, "Invalid Input parameter Question length.");
    res.redirect("/secure/faqs");
    return;
}

------------------------------------------------------------

Match - 3 instances

./pages/secure/healthlinks.js:36,41
async handleDelete(req, res) {
    try {
        if (this.util.validateLength(req.body.name, 50, 1) === false) {
            req.flash(this.const.footerLinksErr, "Invalid Input parameter name length.");
            res.redirect("/secure/healthlinks");
            return;

./pages/secure/healthlinks.js:53,58
async handleEdit(req, res) {
    try {
        if (this.util.validateLength(req.body.name, 50, 1) === false) {
            req.flash(this.const.footerLinksErr, "Invalid Input parameter name length.");
            res.redirect("/secure/healthlinks");
            return;

./pages/secure/healthlinks.js:76,81
async handleCreate(req, res) {
    try {
        if (this.util.validateLength(req.body.name, 50, 1) === false) {
            req.flash(this.const.footerLinksErr, "Invalid Input parameter name length.");
            res.redirect("/secure/healthlinks");
            return;

------------------------------------------------------------

Match - 15 instances

./pages/healthlinks.js:2,8
constructor(server, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderHealthLinks = this.renderHealthLinks.bind(this);

./pages/index.js:2,8
constructor(server, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderhomePage = this.renderhomePage.bind(this);

./pages/search.js:2,8
constructor(server, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderSearch = this.renderSearch.bind(this);

./pages/secure/appsettings.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderAppSettings = this.renderAppSettings.bind(this);

./pages/secure/bannermanagement.js:5,11
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderBannerManagement = this.renderBannerManagement.bind(this);

./pages/secure/faqs.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderFAQS = this.renderFAQS.bind(this);

./pages/secure/healthlinks.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderLinks = this.renderLinks.bind(this);

./pages/secure/login.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.redirectToPreviousPage = this.redirectToPreviousPage.bind(this);

./pages/secure/orders.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderOrders = this.renderOrders.bind(this);

./pages/secure/password.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderPassword = this.renderPassword.bind(this);

./pages/secure/products.js:5,11
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderProducts = this.renderProducts.bind(this);

./pages/secure/profile.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderProfile = this.renderProfile.bind(this);

./pages/secure/secureAPI.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.getUsers = this.getUsers.bind(this);

./pages/secure/success.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderSuccess = this.renderSuccess.bind(this);

./pages/secure/usermanagement.js:2,8
constructor(server, basePath, auth, dataAccessService, utilityService, constantsService) {
    this.dal = dataAccessService;
    this.util = utilityService;
    this.const = constantsService;

    this.loadRoutes = this.loadRoutes.bind(this);
    this.renderUserManagement = this.renderUserManagement.bind(this);

------------------------------------------------------------

Match - 3 instances

./db/dataAccessLayer.js:169,173
async updateFAQ(id, question, answer) {
    return new Promise((acc, rej) => {
        try {
            let faqIdx = FAQ.findIndex((q) => q.id === id);
            if (faqIdx < 0) throw new Error("FAQ " + name + " doesnot exists.");

./db/dataAccessLayer.js:184,188
async deleteFAQ(id) {
    return new Promise((acc, rej) => {
        try {
            let faqIdx = FAQ.findIndex((q) => q.id === id);
            if (faqIdx < 0) throw new Error("FAQ " + name + " doesnot exists.");

./db/dataAccessLayer.js:198,202
async getFAQ(id) {
    return new Promise((acc, rej) => {
        try {
            let faqIdx = FAQ.findIndex((q) => q.id === id);
            if (faqIdx < 0) throw new Error("FAQ " + getFAQ + " doesnot exists.");

------------------------------------------------------------

Match - 3 instances

./db/dataAccessLayer.js:274,280
async deleteHealthLink(name) {
    return new Promise((acc, rej) => {
        try {
            let dbHealthLinkIdx = healthLinks.findIndex((l) => l.name === name);
            if (dbHealthLinkIdx < 0) throw new Error("Health link " + name + " doesnot exists.");

            healthLinks.splice(dbHealthLinkIdx, 1);

./db/dataAccessLayer.js:292,298
async updateHealthLink(name, contents) {
    return new Promise((acc, rej) => {
        try {
            let dbHealthLinkIdx = healthLinks.findIndex((l) => l.name === name);
            if (dbHealthLinkIdx < 0) throw new Error("Health link " + name + " doesnot exists.");

            healthLinks[dbHealthLinkIdx].contents = contents;

./db/dataAccessLayer.js:308,313
async getHealthLinkContentFor(name) {
    return new Promise((acc, rej) => {
        try {
            let dbHealthLinkIdx = healthLinks.findIndex((l) => l.name === name);
            if (dbHealthLinkIdx < 0) throw new Error("Health link " + name + " doesnot exists.");
            acc(Object.assign({}, healthLinks[dbHealthLinkIdx]));

------------------------------------------------------------

Match - 5 instances

./static/resources/scripts/paginatedproducts.js:9,22
$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData("/v1/home/products?page=" + pageNo + "&size=" + size);
    }
}

./static/resources/scripts/paginatedproducts1.js:7,20
$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData("/v1/home/products?page=" + pageNo + "&size=" + size);
    }
}

./static/resources/scripts/paginatedrelatedproducts.js:39,52
$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData(apiURl + "?page=" + pageNo + "&size=" + size + querySegment);
    }
}

./static/resources/scripts/paginatedsearch.js:39,52
$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData(apiURl + "?page=" + pageNo + "&size=" + size + querySegment);
    }
}

./static/resources/scripts/paginatedusers.js:8,21
$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData(apiURl + "?page=" + pageNo + "&size=" + size);
    }
}

------------------------------------------------------------

Match - 3 instances

./pages/secure/products.js:62,72
meta: {
    "code": req.body.code,
    "package_detail": req.body.packageDetail,
    "serving_size": req.body.servingSize,
    "serving_per_container": req.body.servingPerContainer,
    "shippingdetail": req.body.shippingDetails,
    "category": req.body.cat,
    "subCategory": req.body.subCat,
    "mname": req.body.mName,
    "mwebsite": req.body.mWebsite
}

./pages/secure/products.js:242,252
{
    "code": req.body.code,
    "package_detail": req.body.packageDetail,
    "serving_size": req.body.servingSize,
    "serving_per_container": req.body.servingPerContainer,
    "shippingdetail": req.body.shippingDetails,
    "category": req.body.cat,
    "subCategory": req.body.subCat,
    "manufactureName": req.body.mName,
    "manufactureWebsite": req.body.mWebsite
},

./pages/secure/products.js:268,278
{
    "code": req.body.code,
    "package_detail": req.body.packageDetail,
    "serving_size": req.body.servingSize,
    "serving_per_container": req.body.servingPerContainer,
    "shippingdetail": req.body.shippingDetails,
    "category": req.body.cat,
    "subCategory": req.body.subCat,
    "manufactureName": req.body.mName,
    "manufactureWebsite": req.body.mWebsite
},

------------------------------------------------------------

Match - 2 instances

./static/resources/scripts/paginatedproducts.js:77,104
function fillProductInfo(product) {

    return `<div class="card m-2 myshadow myproductcard">
    <a href="/product?pid=${product.id}" >
    <center>
        <img class="productThumbnail" src="../static/resources/images/products/${product.image}" style="max-width:150px;max-height:170px" alt="Product Image">
    </center>
    </a>
    <div class="card-body bg-light">
   <strong>${product.name}</strong>
        <div class="d-flex justify-content-center align-items-center my-2">
        <h3 class="text-success">
        &#8377;${product.offerprice}
        <small><small class="text-muted"><del>&#8377;${product.price}</del></small></small>
        </h3>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <small>Ships in ${product.meta.shippingdetail} day(s)</small>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <button onClick=addProductToSession(${product.id},1) class="btn btn-success my-2 mr-0" type="submit"><i class="fas fa-cart-plus"></i>
                Add to cart</button>
        </div>
    </div>
</div>`;
}

loadData("/v1/home/products?page=" + pageNo + "&size=" + size);

./static/resources/scripts/paginatedproducts1.js:47,73
function fillProductInfo(product) {

    return `<div class="card m-2 myshadow myproductcard">
    <a href="/product?pid=${product.id}" >
    <center>
        <img class="productThumbnail" src="../static/resources/images/products/${product.image}" style="max-width:150px;max-height:170px" alt="Product Image">
    </center>
    </a>
    <div class="card-body bg-light">
   <strong>${product.name}</strong>
        <div class="d-flex justify-content-center align-items-center my-2">
        <h3 class="text-success">
        &#8377;${product.offerprice}
        <small><small class="text-muted"><del>&#8377;${product.price}</del></small></small>
        </h3>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <small>Ships in ${product.meta.shippingdetail} day(s)</small>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <a href="/secure/products?tab=new&pid=${product.id}"><i class="fas fa-edit"></i>Edit</a>
        </div>
    </div>
</div>`;
}

loadData("/v1/home/products?page=" + pageNo + "&size=" + size);

------------------------------------------------------------

Match - 2 instances

./static/resources/scripts/paginatedrelatedproducts.js:8,105
var pageNo = 0;
var size = 10;

function addProductToSession(productId, quantity) {
    $.post("/v1/cart/products", { productId: productId, quantity: quantity }).always((responseData) => {
        if (responseData !== undefined && responseData.TotalProducts !== undefined && parseInt(responseData.TotalProducts)) {
            showSucess("Product added to your shopping cart.")
            shoppingBadge.text(parseInt(responseData.TotalProducts));
        }
        else {
            showFailure("Failed to add product to cart.");
        }
    });
}

function showFailure(message) {
    alertPanel.text(message)
        .removeAttr('class')
        .addClass('alert alert-danger text-center alertPane')
        .show()
        .fadeOut(4000);
}

function showSucess(message) {
    alertPanel.text(message)
        .removeAttr('class')
        .addClass('alert alert-success text-center alertPane')
        .show()
        .fadeOut(4000);
}

$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData(apiURl + "?page=" + pageNo + "&size=" + size + querySegment);
    }
}

function loadData(query) {
    loadingMessage.text("Loading more users from page:" + pageNo);
    var xhrObj = $.getJSON(query).always(function (data) {
        if (xhrObj.status === 206) {
            extractData(data);
            $(window).scroll(shouldLoadNextPage);
        }
        else if (xhrObj.status === 200) {
            $(window).off('scroll', shouldLoadNextPage);
            extractData(data);
            spinner.hide();
        }
        else {
            $(window).off('scroll', shouldLoadNextPage);
            loadingMessage.text("Failed to load users, please refresh and try again");
        }
    });
}
function extractData(data) {
    $.each(data, function (key, val) {
        var clonedTemplate = fillInfo(val);
        container.append(clonedTemplate);
    });
    pageNo++;
}

function fillInfo(product) {
    return `<div class="card m-2 myshadow myproductcard">
    <a href="/product?pid=${product.id}" >
    <center>
        <img class="productThumbnail" src="../static/resources/images/products/${product.image}" style="max-width:150px;max-height:170px" alt="Product Image">
    </center>
    </a>
    <div class="card-body bg-light">
   <strong>${product.name}</strong>
        <div class="d-flex justify-content-center align-items-center my-2">
        <h3 class="text-success">
        &#8377;${product.offerprice}
        <small><small class="text-muted"><del>&#8377;${product.price}</del></small></small>
        </h3>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <small>Ships in ${product.meta.shippingdetail} day(s)</small>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <button onClick=addProductToSession(${product.id},1) class="btn btn-success my-2 mr-0" type="submit"><i class="fas fa-cart-plus"></i>
                Add to cart</button>
        </div>
    </div>
</div>`;
}
querySegment = "&c=" + encodeURIComponent($("#category").text().trim())+"&sc=" + encodeURIComponent($("#subcategory").text().trim());

./static/resources/scripts/paginatedsearch.js:8,105
var pageNo = 0;
var size = 10;

function addProductToSession(productId, quantity) {
    $.post("/v1/cart/products", { productId: productId, quantity: quantity }).always((responseData) => {
        if (responseData !== undefined && responseData.TotalProducts !== undefined && parseInt(responseData.TotalProducts)) {
            showSucess("Product added to your shopping cart.")
            shoppingBadge.text(parseInt(responseData.TotalProducts));
        }
        else {
            showFailure("Failed to add product to cart.");
        }
    });
}

function showFailure(message) {
    alertPanel.text(message)
        .removeAttr('class')
        .addClass('alert alert-danger text-center alertPane')
        .show()
        .fadeOut(4000);
}

function showSucess(message) {
    alertPanel.text(message)
        .removeAttr('class')
        .addClass('alert alert-success text-center alertPane')
        .show()
        .fadeOut(4000);
}

$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData(apiURl + "?page=" + pageNo + "&size=" + size + querySegment);
    }
}

function loadData(query) {
    loadingMessage.text("Loading more users from page:" + pageNo);
    var xhrObj = $.getJSON(query).always(function (data) {
        if (xhrObj.status === 206) {
            extractData(data);
            $(window).scroll(shouldLoadNextPage);
        }
        else if (xhrObj.status === 200) {
            $(window).off('scroll', shouldLoadNextPage);
            extractData(data);
            spinner.hide();
        }
        else {
            $(window).off('scroll', shouldLoadNextPage);
            loadingMessage.text("Failed to load users, please refresh and try again");
        }
    });
}
function extractData(data) {
    $.each(data, function (key, val) {
        var clonedTemplate = fillInfo(val);
        container.append(clonedTemplate);
    });
    pageNo++;
}

function fillInfo(product) {
    return `<div class="card m-2 myshadow myproductcard">
    <a href="/product?pid=${product.id}" >
    <center>
        <img class="productThumbnail" src="../static/resources/images/products/${product.image}" style="max-width:150px;max-height:170px" alt="Product Image">
    </center>
    </a>
    <div class="card-body bg-light">
   <strong>${product.name}</strong>
        <div class="d-flex justify-content-center align-items-center my-2">
        <h3 class="text-success">
        &#8377;${product.offerprice}
        <small><small class="text-muted"><del>&#8377;${product.price}</del></small></small>
        </h3>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <small>Ships in ${product.meta.shippingdetail} day(s)</small>
        </div>
        <div class="d-flex justify-content-center align-items-center">
        <button onClick=addProductToSession(${product.id},1) class="btn btn-success my-2 mr-0" type="submit"><i class="fas fa-cart-plus"></i>
                Add to cart</button>
        </div>
    </div>
</div>`;
}
querySegment = "&s=" + encodeURIComponent($("#keyword").text());

------------------------------------------------------------

Match - 3 instances

./db/dataAccessLayer.js:680,685
updateUserActivationState(userId, status) {
    return new Promise((acc, rej) => {
        try {
            let user = users.find((u) => u.id === userId);
            if (user !== undefined) {
                user.meta.status = status;

./db/dataAccessLayer.js:698,703
updateUserAccountType(userId, accountType) {
    return new Promise((acc, rej) => {
        try {
            let user = users.find((u) => u.id === userId);
            if (user !== undefined) {
                user.meta.type = accountType;

./db/dataAccessLayer.js:716,721
resetUserAccountPassword(userId) {
    return new Promise((acc, rej) => {
        try {
            let user = users.find((u) => u.id === userId);
            if (user !== undefined) {
                user.password = util.getHash("P@55word");

------------------------------------------------------------

Match - 3 instances

./pages/secure/bannermanagement.js:24,28
async renderBannerManagement(req, res) {
     try {
         let pageData = {};
         pageData[this.const.cartItems] = this.util.getCartItemsCount(req);
         pageData[this.const.bannerUploadError] = req.flash(this.const.bannerUploadError);

./pages/secure/password.js:19,23
async renderPassword(req, res) {
    try {
        let pageData = {};
        pageData[this.const.cartItems] = this.util.getCartItemsCount(req);
        pageData[this.const.changePassError] = req.flash(this.const.changePassError);

./pages/secure/usermanagement.js:24,28
async renderUserManagement(req, res) {
    try {
        let pageData = {};
        pageData[this.const.cartItems] = this.util.getCartItemsCount(req);
        pageData[this.const.userManagementError] = req.flash(this.const.userManagementError);

------------------------------------------------------------

Match - 2 instances

./db/dataAccessLayer.js:467,487
    "name": name,
    "offerprice": parseFloat(offerPrice),
    "price": parseFloat(productPrice),
    "image": image,
    "faq": faq, //Has to be int array always
    "keywords": searchKeywords,
    "meta": {
        "code": meta.code,
        "package_detail": meta.package_detail,
        "serving_size": meta.serving_size,
        "serving_per_container": meta.serving_per_container,
        "shippingdetail": meta.shippingdetail,
        "category": meta.category,
        "subCategory": meta.subCategory,
        "mname": meta.manufactureName,
        "mwebsite": meta.manufactureWebsite
    },
    "description": desc,
    "ingredients": ingredients
};
products.push(newProduct);

./db/dataAccessLayer.js:519,539
    "name": name,
    "offerprice": parseFloat(offerPrice),
    "price": parseFloat(productPrice),
    "image": image,
    "faq": faq, //Has to be int array always
    "keywords": searchKeywords,
    "meta": {
        "code": meta.code,
        "package_detail": meta.package_detail,
        "serving_size": meta.serving_size,
        "serving_per_container": meta.serving_per_container,
        "shippingdetail": meta.shippingdetail,
        "category": meta.category,
        "subCategory": meta.subCategory,
        "mname": meta.manufactureName,
        "mwebsite": meta.manufactureWebsite
    },
    "description": desc,
    "ingredients": ingredients
};
products[idx] = Object.assign({}, product);

------------------------------------------------------------

Match - 2 instances

./pages/cart.js:1,10
class pageCart {
    constructor(server, dataAccessService, utilityService, constantsService, textService) {

        this.dal = dataAccessService;
        this.util = utilityService;
        this.const = constantsService;
        this.textService = textService;

        this.loadRoutes = this.loadRoutes.bind(this);
        this.renderCart = this.renderCart.bind(this);

./pages/product.js:2,11
class pageProduct {

    constructor(server, dataAccessService, utilityService, constantsService, textService) {
        this.dal = dataAccessService;
        this.util = utilityService;
        this.const = constantsService;
        this.textService = textService;

        this.loadRoutes = this.loadRoutes.bind(this);
        this.renderProductPage = this.renderProductPage.bind(this);

------------------------------------------------------------

Match - 2 instances

./pages/cart.js:134,140
case "cheque":
    endDate = new Date();
    startDate = new Date();
    endDate.setDate(endDate.getDate() + 2); //Time windows is current + 2 days.
    startDate.setDate(endDate.getDate() - 10); //Time windows is (current +2)-10) days .

    if (this.util.validateLength(req.body.chequeChequeNo, 50, 1) === false) throw new Error("Incomplete or Invalid request for parameter:chequeChequeNo");

./pages/cart.js:162,168
case "bankTransfer":
    endDate = new Date();
    startDate = new Date();
    endDate.setDate(endDate.getDate() + 2); //Time windows is current + 2 days.
    startDate.setDate(endDate.getDate() - 10); //Time windows is (current +2)-10) days .

    if (this.util.validateLength(req.body.bankTransferRefNo, 50, 1) === false) throw new Error("Incomplete or Invalid request for parameter:bankTransferRefNo");

------------------------------------------------------------

Match - 2 instances

./pages/secure/orders.js:23,45
    let productInfo = await this.dal.getProducts(order.products.map(p => p.productId))

    order.products.forEach((prductKVP) => {
        let pi = productInfo.find((p) => p.id === prductKVP.productId);
        if (pi === undefined) {
            productInfo.push({
                id: prductKVP.productId,
                discontinued: true,
                offerprice: prductKVP.offerprice,
                quantity: prductKVP.quantity
            });
        }
        else {
            pi.offerprice = prductKVP.offerprice;
            pi.quantity = prductKVP.quantity
        }

    });

    order.products = productInfo;
}
let pageData = {};
pageData[this.const.orders] = topOrders;

./pages/secure/success.js:26,48
let productInfo = await this.dal.getProducts(order.products.map(p => p.productId))

order.products.forEach((prductKVP) => {
    let pi = productInfo.find((p) => p.id === prductKVP.productId);
    if (pi === undefined) {
        productInfo.push({
            id: prductKVP.productId,
            discontinued: true,
            offerprice: prductKVP.offerprice,
            quantity: prductKVP.quantity
        });
    }
    else {
        pi.offerprice = prductKVP.offerprice;
        pi.quantity = prductKVP.quantity
    }

});

order.products = productInfo;

let pageData = {};
pageData[this.const.orderdetails] = order;

------------------------------------------------------------

Match - 2 instances

./static/resources/scripts/paginatedproducts.js:6,49
var pageNo = 0;
var size = 10;

$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData("/v1/home/products?page=" + pageNo + "&size=" + size);
    }
}

function loadData(query) {
    loadingMessage.text("Loading more products from page:" + pageNo);
    var xhrObj = $.getJSON(query, function (data) {
        var items = [];
        $.each(data, function (key, val) {
            var clonedTemplate = fillProductInfo(val);
            container.append(clonedTemplate);
        });
        pageNo++;

        if (xhrObj.status === 206) {
            $(window).scroll(shouldLoadNextPage);
        }
        else {
            $(window).off('scroll', shouldLoadNextPage);
            if (xhrObj.status !== 200) {
                loadingMessage.text("Failed to load products, please refresh and try again");
            }
            else {
                spinner.hide();
            }
        }
    });
}

function addProductToSession(productId, quantity) {

./static/resources/scripts/paginatedproducts1.js:4,47
var pageNo = 0;
var size = 10;

$.fn.isInViewport = function () {
    var elementTop = $(this).offset().top;
    var elementBottom = elementTop + $(this).outerHeight();
    var viewportTop = $(window).scrollTop();
    var viewportBottom = viewportTop + $(window).height();
    return elementBottom > viewportTop && elementTop < viewportBottom;
};

function shouldLoadNextPage(e) {
    if (spinner.isInViewport()) {
        $(window).off('scroll', shouldLoadNextPage);
        loadData("/v1/home/products?page=" + pageNo + "&size=" + size);
    }
}

function loadData(query) {
    loadingMessage.text("Loading more products from page:" + pageNo);
    var xhrObj = $.getJSON(query, function (data) {
        var items = [];
        $.each(data, function (key, val) {
            var clonedTemplate = fillProductInfo(val);
            container.append(clonedTemplate);
        });
        pageNo++;

        if (xhrObj.status === 206) {
            $(window).scroll(shouldLoadNextPage);
        }
        else {
            $(window).off('scroll', shouldLoadNextPage);
            if (xhrObj.status !== 200) {
                loadingMessage.text("Failed to load products, please refresh and try again");
            }
            else {
                spinner.hide();
            }
        }
    });
}

function fillProductInfo(product) {

17 matches found across 35 files
